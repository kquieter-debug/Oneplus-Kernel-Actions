name: 一加Pad 内核构建
on:
  workflow_dispatch:
    inputs:
      KERNEL_SUFFIX:
        description: '内核名称修改'
        required: true
        default: '-Kquieter'
      KERNEL_TIME_MODE:
        description: "编译时间模式（Auto/自定义）"
        required: true
        default: '自动获取'
        type: choice
        options:
          - 自动获取
          - 自定义
      KERNEL_TIME_CUSTOM:
        description: "自定义编译时间(仅在自定义模式下生效，如 2025-06-04 12:00:00 CST)"
        required: false
        default: ''
      enable_feature_x:
        description: "是否启用kpm"
        required: false
        default: false
        type: boolean
      enable_feature_y:
        description: "是否启用lz4kd"
        required: false
        default: false
        type: boolean
      enable_feature_z:
        description: "是否添加风驰驱动"
        required: false
        default: false
        type: boolean
permissions:
  contents: write
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: content
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "false"
      CCACHE_DIR: /home/runner/.ccache
      CCACHE_MAXSIZE: 8G
      CCACHE_COMPRESS: "true"
    steps:
      - name: Restore ccache
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            ccache-${{ runner.os }}-
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl ccache libelf-dev elfutils llvm clang lld flex bison bc build-essential
      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
      - name: 初始化源码仓库
        run: |
          rm -rf kernel_workspace && mkdir kernel_workspace && cd kernel_workspace
          echo "正在克隆源码仓库..."
          git clone --depth=1 https://github.com/oppo-source/android_kernel_oppo_mt6897 common -b oppo/mt6897_v_15.0.0_oppopad3
          
          echo "正在克隆补丁仓库..."
          git clone https://github.com/Carl1984/oppo_oplus_realme_sm8650.git
          
          # 检查补丁目录结构并复制文件
          echo "检查补丁目录结构..."
          find ./oppo_oplus_realme_sm8650 -type f -name "*.patch" | head -10
          ls -la ./oppo_oplus_realme_sm8650/
          
          # 尝试不同的补丁目录路径
          if [ -d "./oppo_oplus_realme_sm8650/patches" ]; then
            echo "使用 patches 目录"
            PATCH_DIR="./oppo_oplus_realme_sm8650/patches"
          elif [ -d "./oppo_oplus_realme_sm8650/patch" ]; then
            echo "使用 patch 目录"
            PATCH_DIR="./oppo_oplus_realme_sm8650/patch"
          else
            echo "在根目录中查找补丁文件"
            PATCH_DIR="./oppo_oplus_realme_sm8650"
          fi
          
          # 复制补丁文件（如果存在）
          if [ -f "$PATCH_DIR/001-lz4.patch" ]; then
            cp "$PATCH_DIR/001-lz4.patch" ./common/
          else
            echo "警告: 001-lz4.patch 未找到，跳过"
          fi
          
          if [ -f "$PATCH_DIR/002-zstd.patch" ]; then
            cp "$PATCH_DIR/002-zstd.patch" ./common/
          else
            echo "警告: 002-zstd.patch 未找到，跳过"
          fi
          
          # 复制 Vendor 文件
          if [ -d "./oppo_oplus_realme_sm8650/Vendor" ]; then
            rm -rf ./common/drivers/soc/oplus/*
            cp -r ./oppo_oplus_realme_sm8650/Vendor/* ./common/drivers/soc/oplus/
          else
            echo "警告: Vendor 目录未找到"
          fi
          
          # 复制锁定相关文件
          if [ -f "./oppo_oplus_realme_sm8650/patches/locking_main.h" ]; then
            rm -rf ./common/kernel/locking/locking_main.h
            cp ./oppo_oplus_realme_sm8650/patches/locking_main.h ./common/kernel/locking/
          elif [ -f "./oppo_oplus_realme_sm8650/patch/locking_main.h" ]; then
            rm -rf ./common/kernel/locking/locking_main.h
            cp ./oppo_oplus_realme_sm8650/patch/locking_main.h ./common/kernel/locking/
          fi
          
          if [ -f "./oppo_oplus_realme_sm8650/patches/oplus_locking.c" ]; then
            rm -rf ./common/kernel/locking/oplus_locking.c
            cp ./oppo_oplus_realme_sm8650/patches/oplus_locking.c ./common/kernel/locking/
          elif [ -f "./oppo_oplus_realme_sm8650/patch/oplus_locking.c" ]; then
            rm -rf ./common/kernel/locking/oplus_locking.c
            cp ./oppo_oplus_realme_sm8650/patch/oplus_locking.c ./common/kernel/locking/
          fi
          
          if [ -f "./oppo_oplus_realme_sm8650/patches/sa_common_struct.h" ]; then
            rm -rf ./common/kernel/locking/sa_common_struct.h
            cp ./oppo_oplus_realme_sm8650/patches/sa_common_struct.h ./common/kernel/locking/
          elif [ -f "./oppo_oplus_realme_sm8650/patch/sa_common_struct.h" ]; then
            rm -rf ./common/kernel/locking/sa_common_struct.h
            cp ./oppo_oplus_realme_sm8650/patch/sa_common_struct.h ./common/kernel/locking/
          fi
          
          echo "正在去除 ABI 保护 & 去除 dirty 后缀..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            [ -f "$f" ] && sed -i 's/ -dirty//g' "$f"
            [ -f "$f" ] && sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done
      - name: Verify source code
        run: |
          cd kernel_workspace
          if [ ! -d "common" ] || [ ! -f "common/Makefile" ]; then
            echo "Source code verification failed"
            exit 1
          fi
          echo "Source code verified successfully"
      - name: Set up SukiSU
        run: |
          cd kernel_workspace/common
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          
          if [ -d "./KernelSU" ]; then
            cd ./KernelSU
            KSU_VERSION=$(expr $(git rev-list --count HEAD) "+" 10606)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          else
            echo "KernelSU directory not found, skipping version setup"
            echo "KSUVER=10606" >> $GITHUB_ENV
          fi
      - name: Set up susfs
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd common
          
          # 检查并应用 susfs patch
          if [ -f "../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch" ]; then
            cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./
            cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/ 2>/dev/null || true
            cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/ 2>/dev/null || true
            
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
            sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
            patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || echo "Patch may have already been applied"
          fi
          
          # lz4k 相关文件
          if [ -d "../SukiSU_patch/other/zram/lz4k" ]; then
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux 2>/dev/null || true
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib 2>/dev/null || true
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto 2>/dev/null || true
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./lib/ 2>/dev/null || true
          fi
          
          # syscall hooks
          if [ -f "../SukiSU_patch/hooks/syscall_hooks.patch" ]; then
            cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch || echo "Syscall hooks patch may have failed"
          fi
          
          echo "susfs setup completed"
      # ===================== 关键修改：修复 Git 仓库目录问题 =====================
      - name: Apply HMBird GKI patch
        run: |
          cd kernel_workspace/common/drivers
          # 创建 hmbird_patch.c 补丁文件
          cat << 'EOF' > hmbird_patch.c
          #include <linux/init.h>
          #include <linux/module.h>
          #include <linux/of.h>
          #include <linux/slab.h>
          #include <linux/string.h>
          static int __init hmbird_patch_init(void)
          {
              struct device_node *ver_np;
              const char *type;
              int ret;
              ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
              if (!ver_np) {
                   pr_info("hmbird_patch: version_type node not found\n");
                   return 0;
              }
              ret = of_property_read_string(ver_np, "type", &type);
              if (ret) {
                   pr_info("hmbird_patch: type property not found\n");
                   of_node_put(ver_np);
                   return 0;
              }
              if (strcmp(type, "HMBIRD_OGKI")) {
                   of_node_put(ver_np);
                   return 0;
              }
              struct property *prop = of_find_property(ver_np, "type", NULL);
              if (prop) {
                   struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
                   if (!new_prop) {
                        pr_info("hmbird_patch: kmalloc for new_prop failed\n");
                        of_node_put(ver_np);
                        return 0;
              }
              memcpy(new_prop, prop, sizeof(*prop));
              new_prop->value = kmalloc(strlen("HMBIRD_GKI") + 1, GFP_KERNEL);
              if (!new_prop->value) {
                   pr_info("hmbird_patch: kmalloc for new_prop->value failed\n");
                   kfree(new_prop);
                   of_node_put(ver_np);
                   return 0;
             }
             strcpy(new_prop->value, "HMBIRD_GKI");
             new_prop->length = strlen("HMBIRD_GKI") + 1;
             if (of_remove_property(ver_np, prop) != 0) {
                  pr_info("hmbird_patch: of_remove_property failed\n");
                  return 0;
             }
             if (of_add_property(ver_np, new_prop) !=0) {
                  pr_info("hmbird_patch: of_add_property failed\n");
                  return 0;
             }
             pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
          }
          else {
              pr_info("hmbird_patch: type property structure not found\n");
          }
          of_node_put(ver_np);
          return 0;
          }
          early_initcall(hmbird_patch_init);
          MODULE_LICENSE("GPL");
          MODULE_AUTHOR("reigadegr");
          MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
          EOF
          # 修改 drivers 目录的 Makefile，添加补丁编译
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          # 关键修改：从 drivers 目录回到 common 目录（Git 仓库目录），而非 kernel_workspace
          cd ../../
          # 在 common 目录执行 Git 提交（common 是克隆的源码仓库，自带 Git 环境）
          git add -A
          git commit -m "Add HMBird GKI patch" || true
      # ========================================================================
      - name: Apply lz4kd Patches
        if: ${{ inputs.enable_feature_y }}
        run: |
          cd kernel_workspace/common
          if [ -f "../../SukiSU_patch/other/zram/zram_patch/6.6/lz4kd.patch" ]; then
            cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || echo "lz4kd patch may have failed"
          else
            echo "lz4kd patch file not found"
          fi
      - name: Add SUSFS Configuration Settings
        run: |
          cd kernel_workspace/common
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/gki_defconfig
          # Add VFS configuration settings
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./arch/arm64/configs/gki_defconfig
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/gki_defconfig
          
          echo "CONFIG_CRYPTO_LZ4HC=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4K=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4KD=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_842=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_LOCALVERSION_AUTO=n" >> ./arch/arm64/configs/gki_defconfig
          
          # Remove check_defconfig
          if [ -f "./build.config.gki" ]; then
            sudo sed -i 's/check_defconfig//' ./build.config.gki
          fi
          
          git add -A && git commit -a -m "Add SUSFS configuration" || true
      - name: Add KPM Configuration Settings
        if: ${{ inputs.enable_feature_x }}
        run: |
          cd kernel_workspace/common
          echo "CONFIG_KPM=y" >> ./arch/arm64/configs/gki_defconfig
          git add -A && git commit -a -m "Add KPM configuration" || true
      - name: Add make name
        run: |
          cd kernel_workspace/common
          sed -i 's/${scm_version}//' ./scripts/setlocalversion
          sed -i "s/-4k/${{ github.event.inputs.KERNEL_SUFFIX }}/g" ./arch/arm64/configs/gki_defconfig
          git add -A && git commit -a -m "Add kernel suffix" || true
      - name: Add sched_ext
        if: ${{ inputs.enable_feature_z }}
        run: |
          cd kernel_workspace
          git clone https://github.com/HanKuCha/sched_ext.git
          cp -r ./sched_ext/* ./common/kernel/sched
          rm -rf ./sched_ext
          cd common/kernel/sched
          git add -A && git commit -a -m "Add sched_ext" || true
      - name: Set the kernel compilation time
        run: |
          if [ "${{ github.event.inputs.KERNEL_TIME_MODE }}" = "自动获取" ]; then
            echo "KERNEL_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S CST')" >> $GITHUB_ENV
          else
            if [ -n "${{ github.event.inputs.KERNEL_TIME_CUSTOM }}" ]; then
              echo "KERNEL_TIME=${{ github.event.inputs.KERNEL_TIME_CUSTOM }}" >> $GITHUB_ENV
            else
              echo "KERNEL_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S CST')" >> $GITHUB_ENV
            fi
          fi
      - name: Set Kernel build timestamp
        run: |
          export SOURCE_DATE_EPOCH=$(date -d "${{ env.KERNEL_TIME }}" +%s)
          echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV
      - name: Build Kernel
        run: |
          export KBUILD_BUILD_TIMESTAMP="${{ env.KERNEL_TIME }}"
          export PATH="/usr/lib/ccache:$PATH"
          
          cd kernel_workspace/common
          
          # 创建 out 目录并配置
          mkdir -p out
          
          # 构建配置
          make LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
               CC=clang LD=ld.lld O=out gki_defconfig
          
          # 开始构建
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
               CC=clang LD=ld.lld O=out KCFLAGS+=-O2
          
          # 检查构建产物
          if [ -f "out/arch/arm64/boot/Image" ]; then
            mkdir -p ../../dist
            cp out/arch/arm64/boot/Image ../../dist/
            echo "Kernel built successfully"
          else
            echo "Kernel build failed - Image not found"
            ls -la out/arch/arm64/boot/
            exit 1
          fi
      - name: Apply Linux Patch
        run: |
          cd kernel_workspace/common/out
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          if [ -f "oImage" ]; then
            rm -f Image
            mv oImage Image
            echo "Linux patch applied successfully"
          else
            echo "oImage not found after patching"
          fi
      - name: Prepare AnyKernel3
        run: |
          cd kernel_workspace
          git clone https://github.com/jiangbeichen233/Anykernel3-For-Oneplus-13.git AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          rm -rf ./AnyKernel3/push.sh
          if [ -f "dist/Image" ]; then
            cp dist/Image ./AnyKernel3/
            echo "AnyKernel3 prepared successfully"
          else
            echo "Kernel Image not found in dist/"
            exit 1
          fi
      - name: Generate Release Description
        run: |
          if [ "${{ github.event.inputs.enable_feature_x }}" = "true" ]; then
            kpm="已嵌入"
          else
            kpm="未嵌入"
          fi
          if [ "${{ github.event.inputs.enable_feature_y }}" = "true" ]; then
            lz4kd="已嵌入"
          else
            lz4kd="未嵌入"
          fi
          if [ "${{ github.event.inputs.enable_feature_z }}" = "true" ]; then
            fengchi="已嵌入"
          else
            fengchi="未嵌入"
          fi
          susfs="已嵌入"
          FEIL="OnePlus_Pad_MT6897"
          
          cat << EOF > release_body.md
          **SuKiSu 版本**: $KSUVER
          **内核型号**: $FEIL
          **KPM**: $kpm
          **LZ4KD**: $lz4kd
          **风驰内核**: $fengchi
          **SUSFS**: $susfs
          **构建时间**: ${{ env.KERNEL_TIME }}
          **构建者**: Kquieter
          EOF
          
          cat release_body.md
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          cat release_body.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Get formatted date
        id: formatted_date
        run: |
          DATE=$(date +'%y%m%d-%H%M')
          echo "formatted=$DATE" >> $GITHUB_OUTPUT
      - name: Zip AnyKernel3
        run: |
          cd kernel_workspace
          zip -r "SuKiSu_${KSUVER}_oneplus_pad_${{ steps.formatted_date.outputs.formatted }}.zip" AnyKernel3/*
          echo "Zip file created: SuKiSu_${KSUVER}_oneplus_pad_${{ steps.formatted_date.outputs.formatted }}.zip"
      - name: Upload AnyKernel3 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SuKiSu_${{ env.KSUVER }}_oneplus_pad
          path: kernel_workspace/AnyKernel3/*
      - name: Upload Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Image_SuKiSu_${{ env.KSUVER }}_oneplus_pad
          path: kernel_workspace/dist/Image
      - name: Upload Zip Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SuKiSu_${{ env.KSUVER }}_oneplus_pad_${{ steps.formatted_date.outputs.formatted }}.zip
          path: kernel_workspace/SuKiSu_${{ env.KSUVER }}_oneplus_pad_${{ steps.formatted_date.outputs.formatted }}.zip
      - name: Upload Release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'workflow_dispatch'
        with:
          tag_name: SuKiSu_${{ env.KSUVER }}_oneplus_pad_${{ steps.formatted_date.outputs.formatted }}
          name: OnePlus Pad 内核构建 SuKiSu ${{ env.KSUVER }} 版本
          body: ${{ env.RELEASE_BODY }}
          files: |
            kernel_workspace/SuKiSu_${{ env.KSUVER }}_oneplus_pad_${{ steps.formatted_date.outputs.formatted }}.zip
            kernel_workspace/dist/Image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
